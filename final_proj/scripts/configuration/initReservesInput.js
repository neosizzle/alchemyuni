const contractAddresses = require("../information/contractAddresses.js");

const initReservesInput = [
  {
    assetTicker: "WBNB",
    aToken: contractAddresses.AToken,
    stableDebtToken: contractAddresses.StableDebtToken,
    variableDebtToken: contractAddresses.VariableDebtToken,
    decimals: 18n,
    strategyAddress: contractAddresses.LowRiskAssetStrategy,
    underlyingAsset: contractAddresses.WBNB,
    treasury: contractAddresses.Treasury,
    incentivesController: contractAddresses.RewardsControllerProxy,
  },
  {
    assetTicker: "WBTC",
    aToken: contractAddresses.AToken,
    stableDebtToken: contractAddresses.StableDebtToken,
    variableDebtToken: contractAddresses.VariableDebtToken,
    decimals: 18n,
    strategyAddress: contractAddresses.LowRiskAssetStrategy,
    underlyingAsset: contractAddresses.WBTC,
    treasury: contractAddresses.Treasury,
    incentivesController: contractAddresses.RewardsControllerProxy,
  },
  {
    assetTicker: "WETH",
    aToken: contractAddresses.AToken,
    stableDebtToken: contractAddresses.StableDebtToken,
    variableDebtToken: contractAddresses.VariableDebtToken,
    decimals: 18n,
    strategyAddress: contractAddresses.LowRiskAssetStrategy,
    underlyingAsset: contractAddresses.WETH,
    treasury: contractAddresses.Treasury,
    incentivesController: contractAddresses.RewardsControllerProxy,
  },
  {
    assetTicker: "LTC",
    aToken: contractAddresses.AToken,
    stableDebtToken: contractAddresses.StableDebtToken,
    variableDebtToken: contractAddresses.VariableDebtToken,
    decimals: 18n,
    strategyAddress: contractAddresses.HighRiskAssetStrategy,
    underlyingAsset: contractAddresses.LTC,
    treasury: contractAddresses.Treasury,
    incentivesController: contractAddresses.RewardsControllerProxy,
  },
  {
    assetTicker: "AAVE",
    aToken: contractAddresses.AToken,
    stableDebtToken: contractAddresses.StableDebtToken,
    variableDebtToken: contractAddresses.VariableDebtToken,
    decimals: 18n,
    strategyAddress: contractAddresses.HighRiskAssetStrategy,
    underlyingAsset: contractAddresses.AAVE,
    treasury: contractAddresses.Treasury,
    incentivesController: contractAddresses.RewardsControllerProxy,
  },
  {
    assetTicker: "USDT",
    aToken: contractAddresses.AToken,
    stableDebtToken: contractAddresses.StableDebtToken,
    variableDebtToken: contractAddresses.VariableDebtToken,
    decimals: 18n,
    strategyAddress: contractAddresses.StablecoinStrategy,
    underlyingAsset: contractAddresses.USDT,
    treasury: contractAddresses.Treasury,
    incentivesController: contractAddresses.RewardsControllerProxy,
  },
  {
    assetTicker: "USDC",
    aToken: contractAddresses.AToken,
    stableDebtToken: contractAddresses.StableDebtToken,
    variableDebtToken: contractAddresses.VariableDebtToken,
    decimals: 18n,
    strategyAddress: contractAddresses.StablecoinStrategy,
    underlyingAsset: contractAddresses.USDC,
    treasury: contractAddresses.Treasury,
    incentivesController: contractAddresses.RewardsControllerProxy,
  },
  {
    assetTicker: "BUSD",
    aToken: contractAddresses.AToken,
    stableDebtToken: contractAddresses.StableDebtToken,
    variableDebtToken: contractAddresses.VariableDebtToken,
    decimals: 18n,
    strategyAddress: contractAddresses.StablecoinStrategy,
    underlyingAsset: contractAddresses.BUSD,
    treasury: contractAddresses.Treasury,
    incentivesController: contractAddresses.RewardsControllerProxy,
  },
  {
    assetTicker: "DAI",
    aToken: contractAddresses.AToken,
    stableDebtToken: contractAddresses.StableDebtToken,
    variableDebtToken: contractAddresses.VariableDebtToken,
    decimals: 18n,
    strategyAddress: contractAddresses.StablecoinStrategy,
    underlyingAsset: contractAddresses.DAI,
    treasury: contractAddresses.Treasury,
    incentivesController: contractAddresses.RewardsControllerProxy,
  },
];

module.exports = initReservesInput;
